import{_ as d,o as e,c as n,O as r}from"./chunks/framework.42999896.js";const b=JSON.parse('{"title":".nodes File Format Specification","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"reference/spec/nodes.md","filePath":"reference/spec/nodes.md"}'),o={name:"reference/spec/nodes.md"};function a(i,t,l,s,h,c){return e(),n("div",null,t[0]||(t[0]=[r('<h1 id="nodes-file-format-specification" tabindex="-1">.nodes File Format Specification <a class="header-anchor" href="#nodes-file-format-specification" aria-label="Permalink to &quot;.nodes File Format Specification&quot;">​</a></h1><h2 id="file-structure" tabindex="-1">File Structure <a class="header-anchor" href="#file-structure" aria-label="Permalink to &quot;File Structure&quot;">​</a></h2><table><thead><tr><th>Start of File</th></tr></thead><tbody><tr><td><a href="/sticknodes.js/reference/spec/nodes.html#Header">Header</a></td></tr><tr><td><a href="/sticknodes.js/reference/spec/nodes.html#node-data">Node Data</a></td></tr><tr><td><a href="/sticknodes.js/reference/spec/nodes.html#polyfill-header">Polyfill Header</a></td></tr><tr><td><a href="/sticknodes.js/reference/spec/nodes.html#polyfill-data">Polyfill Data</a></td></tr><tr><td>End of file</td></tr></tbody></table><h2 id="header" tabindex="-1">Header <a class="header-anchor" href="#header" aria-label="Permalink to &quot;Header&quot;">​</a></h2><p>The header consists of up to 16 bytes depending on the SN version. They are as follows:</p><table><thead><tr><th>Byte Range</th><th>Data Type</th><th>Versions</th><th>Description</th></tr></thead><tbody><tr><td>1-4</td><td>32-bit signed int big-endian</td><td>Any</td><td>Stick Nodes version number. Must be between 0 and the latest version (inclusive).</td></tr><tr><td>5-8</td><td>32-bit signed int big-endian</td><td>&gt;=403</td><td>Build number</td></tr><tr><td>9-12</td><td>32-bit float big-endian</td><td>Any</td><td>Stickfigure scale</td></tr><tr><td>13-16</td><td>32-bit signed int big-endian</td><td>Any</td><td>Stickfigure color. See the <a href="/sticknodes.js/reference/spec/nodes.html#color">color reference</a> for more information.</td></tr><tr><td>17-∞</td><td>sequence of <a href="/sticknodes.js/reference/spec/nodes.html#node-data">Node Data</a></td><td>Any</td><td>See <a href="/sticknodes.js/reference/spec/nodes.html#node-data">Node Data</a> for more information.</td></tr></tbody></table><h2 id="node-data" tabindex="-1">Node Data <a class="header-anchor" href="#node-data" aria-label="Permalink to &quot;Node Data&quot;">​</a></h2><p>Each node consists of up to 90 bytes depending on the SN version and build number. They are as follows:</p><table><thead><tr><th>Byte Range</th><th>Data Type</th><th>Versions</th><th>Builds</th><th>Description</th></tr></thead><tbody><tr><td>1</td><td>8-bit signed byte</td><td>Any</td><td>Any</td><td>Node type. See the <a href="/sticknodes.js/reference/spec/nodes.html#node-types">node types table</a> for more information.</td></tr><tr><td>2-5</td><td>32-bit signed int big-endian</td><td>Any</td><td>Any</td><td>Draw order index. 0 for main node. lesser = behind, greater = in front. Acts as ID for node. Every node must have a unique draw order index.</td></tr><tr><td>6</td><td>8-bit unsigned byte</td><td>Any</td><td>Any</td><td>Is static boolean</td></tr><tr><td>7</td><td>8-bit unsigned byte</td><td>Any</td><td>Any</td><td>Is Stretchy boolean</td></tr><tr><td>8</td><td>8-bit unsigned byte</td><td>&gt;=248</td><td>Any</td><td>Is smart stretch boolean</td></tr><tr><td>9</td><td>8-bit unsigned byte</td><td>&gt;=252</td><td>Any</td><td>Do not apply smart stretch boolean</td></tr><tr><td>10</td><td>8-bit unsigned byte</td><td>Any</td><td>Any</td><td>Use segment color boolean</td></tr><tr><td>11</td><td>8-bit unsigned byte</td><td>&gt;=256</td><td>Any</td><td>Use circle outline boolean</td></tr><tr><td>12</td><td>8-bit unsigned byte</td><td>&gt;=403</td><td>&gt;=21</td><td>Circle is hollow boolean</td></tr><tr><td>13</td><td>8-bit unsigned byte</td><td>&gt;=176</td><td>Any</td><td>Use gradient boolean</td></tr><tr><td>14</td><td>8-bit unsigned byte</td><td>&gt;=176</td><td>Any</td><td>Reverse gradient boolean</td></tr><tr><td>15-16</td><td>16-bit signed int (short big-endian)</td><td>&gt;=403</td><td>&gt;=20</td><td>Gradient mode</td></tr><tr><td>17</td><td>8-bit unsigned byte</td><td>Any</td><td>Any</td><td>Use segment scale boolean</td></tr><tr><td>18-21</td><td>32-bit float big-endian</td><td>Any</td><td>Any</td><td>Local X. The X offset from the parent node. Positive in rightward direction, negative in the leftward</td></tr><tr><td>22-25</td><td>32-bit float big-endian</td><td>Any</td><td>Any</td><td>Local Y. The Y offset from the parent node. Positive in upward direction, negative in the downward direction</td></tr><tr><td>26-29</td><td>32-bit float big-endian</td><td>Any</td><td>Any</td><td>Scale</td></tr><tr><td>30-33</td><td>32-bit float big-endian</td><td>Any</td><td>Any</td><td>Default length</td></tr><tr><td>34-37</td><td>32-bit float big-endian</td><td>Any</td><td>Any</td><td>Length</td></tr><tr><td>38-41</td><td>32-bit signed int big-endian</td><td>Any</td><td>Any</td><td>Default thickness</td></tr><tr><td>42-45</td><td>32-bit signed int big-endian</td><td>Any</td><td>Any</td><td>Thickness</td></tr><tr><td>46-49</td><td>32-bit signed int big-endian</td><td>&gt;=320</td><td>Any</td><td>Segment curve radius &amp; default curve radius</td></tr><tr><td>50</td><td>8-bit unsigned byte</td><td>&gt;=403</td><td>&gt;=20</td><td>Curve &quot;circulization&quot; (circularization) boolean</td></tr><tr><td>51-52</td><td>16-bit signed int (short) big-endian</td><td>&gt;=403</td><td>&gt;=21</td><td>Segment curve polyfill precision</td></tr><tr><td>53</td><td>8-bit unsigned byte</td><td>&gt;=256</td><td>Any</td><td>Half-arc boolean</td></tr><tr><td>54-55</td><td>16-bit signed int (short) big-endian</td><td>&gt;=256</td><td>Any</td><td>Right triangle direction</td></tr><tr><td>56</td><td>8-bit unsigned byte</td><td>&gt;=300</td><td>Any</td><td>Triangle upside-down boolean</td></tr><tr><td>57-60</td><td>32-bit float big-endian</td><td>&gt;=256</td><td>Any</td><td>Trapezoid top thickness ratio</td></tr><tr><td>61-62</td><td>16-bit signed int (short) big-endian</td><td>&gt;=256</td><td>Any</td><td>Number of polygon vertices</td></tr><tr><td>63-66</td><td>32-bit float big-endian</td><td>&gt;=248</td><td>Any</td><td>Default local angle</td></tr><tr><td>67-70</td><td>32-bit float big-endian</td><td>Any</td><td>Any</td><td>Local angle</td></tr><tr><td>71-74</td><td>32-bit float big-endian</td><td>&gt;=248</td><td>Any</td><td>Default angle</td></tr><tr><td>75-78</td><td>32-bit signed int big-endian</td><td>Any</td><td>Any</td><td>Color. See the <a href="/sticknodes.js/reference/spec/nodes.html#color">color reference</a> for more information.</td></tr><tr><td>79-82</td><td>32-bit signed int big-endian</td><td>&gt;=176</td><td>Any</td><td>Gradient color. See the <a href="/sticknodes.js/reference/spec/nodes.html#color">color reference</a> for more information.</td></tr><tr><td>83-86</td><td>32-bit signed int big-endian</td><td>&gt;=256</td><td>Any</td><td>Circle outline color. See the <a href="/sticknodes.js/reference/spec/nodes.html#color">color reference</a> for more information.</td></tr><tr><td>87-90</td><td>32-bit signed int big-endian</td><td>Any</td><td>Any</td><td><span style="color:coral;">A</span> = Number of child nodes</td></tr><tr><td>91-(~90<span style="color:coral;">A</span>+90)</td><td>sequence with size of <span style="color:coral;">A</span> of <a href="/sticknodes.js/reference/spec/nodes.html#node-data">Node Data</a></td><td>Any</td><td>Any</td><td>See <a href="/sticknodes.js/reference/spec/nodes.html#node-data">Node Data</a> for more information.</td></tr></tbody></table><h2 id="polyfills" tabindex="-1">Polyfills <a class="header-anchor" href="#polyfills" aria-label="Permalink to &quot;Polyfills&quot;">​</a></h2><p>Requires version 2.3.0 or later.</p><h3 id="polyfill-header" tabindex="-1">Polyfill Header <a class="header-anchor" href="#polyfill-header" aria-label="Permalink to &quot;Polyfill Header&quot;">​</a></h3><p>The polyfills header consists of 4 bytes. They are as follows:</p><table><thead><tr><th>Byte Range</th><th>Data Type</th><th>Versions</th><th>Description</th></tr></thead><tbody><tr><td>1-4</td><td>32-bit signed int big-endian</td><td>&gt;=230</td><td><span style="color:coral;">B</span> = Number of polyfills</td></tr><tr><td>5-(13<span style="color:coral;">B</span>+4)</td><td>sequence with size of <span style="color:coral;">B</span> of <a href="/sticknodes.js/reference/spec/nodes.html#polyfill-data">Polyfill Data</a></td><td>See <a href="/sticknodes.js/reference/spec/nodes.html#polyfill-data">Polyfill Data</a> for more information.</td><td></td></tr></tbody></table><h3 id="polyfill-data" tabindex="-1">Polyfill Data <a class="header-anchor" href="#polyfill-data" aria-label="Permalink to &quot;Polyfill Data&quot;">​</a></h3><p>Each polyfill consists of 13 bytes. They are as follows:</p><table><thead><tr><th>Byte Range</th><th>Data Type</th><th>Versions</th><th>Description</th></tr></thead><tbody><tr><td>1-4</td><td>32-bit signed int big-endian</td><td>&gt;=230</td><td>Draw order index of parent node (becomes the anchor node)</td></tr><tr><td>5-8</td><td>32-bit signed int big-endian</td><td>&gt;=230</td><td>Color. See the <a href="/sticknodes.js/reference/spec/nodes.html#color">color reference</a> for more information.</td></tr><tr><td>9</td><td>8-bit unsigned byte</td><td>&gt;=230</td><td>Use polyfill color boolean</td></tr><tr><td>10-13</td><td>32-bit signed int big-endian</td><td>&gt;=230</td><td><span style="color:coral;">C</span> = Number of polyfill nodes (not counting the anchor node)</td></tr><tr><td>14-(4<span style="color:coral;">C</span>+13)</td><td>sequence with size of <span style="color:coral;">C</span> of 32-bit signed int big-endian</td><td>&gt;=230</td><td>The draw order index of each node that the polyfill is attached to, in order.</td></tr></tbody></table><h2 id="additional-information" tabindex="-1">Additional Information <a class="header-anchor" href="#additional-information" aria-label="Permalink to &quot;Additional Information&quot;">​</a></h2><h3 id="node-types" tabindex="-1">Node Types <a class="header-anchor" href="#node-types" aria-label="Permalink to &quot;Node Types&quot;">​</a></h3><p>Each node type is represented by an integer. They are as follows:</p><table><thead><tr><th>Integer</th><th>Node Type</th></tr></thead><tbody><tr><td>-1</td><td>main node</td></tr><tr><td>0</td><td>rounded segment</td></tr><tr><td>1</td><td>segment</td></tr><tr><td>2</td><td>circle</td></tr><tr><td>3</td><td>triangle</td></tr><tr><td>4</td><td>filled circle (automatically converted to circle with an outline)</td></tr><tr><td>5</td><td>ellipse</td></tr><tr><td>6</td><td>trapezoid</td></tr><tr><td>7</td><td>polygon</td></tr></tbody></table><h3 id="color" tabindex="-1">Color <a class="header-anchor" href="#color" aria-label="Permalink to &quot;Color&quot;">​</a></h3><p>Color is represented by 4 bytes. They are as follows:</p><table><thead><tr><th>Byte Range</th><th>Data Type</th><th>Description</th></tr></thead><tbody><tr><td>1</td><td>8-bit unsigned int</td><td>Alpha</td></tr><tr><td>2</td><td>8-bit unsigned int</td><td>Blue</td></tr><tr><td>3</td><td>8-bit unsigned int</td><td>Green</td></tr><tr><td>4</td><td>8-bit unsigned int</td><td>Red</td></tr></tbody></table><h2 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h2><ul><li>The node type for the first node must be -1</li><li>The draw order index for the first node must be 0</li><li>Most likely Local X and Local Y should be 0 for the first node</li><li>Most likely Local Angle should be 0 for the first node</li><li>I would set all booleans to 0 for the first node just to be safe</li></ul>',26)]))}const y=d(o,[["render",a]]);export{b as __pageData,y as default};
